{"version":3,"sources":["../node_modules/@mui/material/DialogTitle/DialogTitle.js","../../src/implementation/constants.ts","../../src/implementation/error.ts","../../src/implementation/connection.ts","../../src/implementation/location.ts","../../src/implementation/failrequest.ts","../../src/implementation/type.ts","../../src/implementation/url.ts","../../src/implementation/request.ts","../../src/implementation/backoff.ts","../../src/implementation/fs.ts","../../src/implementation/string.ts","../../src/platform/browser/base64.ts","../../src/implementation/blob.ts","../../src/implementation/json.ts","../../src/implementation/path.ts","../../src/implementation/metadata.ts","../../src/implementation/list.ts","../../src/implementation/requestinfo.ts","../../src/implementation/requests.ts","../../src/implementation/taskenums.ts","../../src/implementation/observer.ts","../../src/implementation/async.ts","../../src/platform/browser/connection.ts","../../src/task.ts","../../src/reference.ts","../../src/service.ts","../../src/constants.ts","../../src/api.ts","../../src/index.ts","../../../src/tasksnapshot.ts","../../../src/task.ts","../../../src/list.ts","../../../src/reference.ts","../../../src/service.ts","../../../src/index.ts","../node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js","../node_modules/@mui/material/DialogContentText/DialogContentText.js"],"names":["_excluded","DialogTitleRoot","styled","Typography","name","slot","overridesResolver","props","styles","root","padding","flex","DialogTitle","React","inProps","ref","useThemeProps","className","idProp","id","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","DialogContext","titleId","_jsx","_extends","component","clsx","variant","DEFAULT_HOST","code","message","prependCode","customData","serverResponse","_baseMessage","Object","setPrototypeOf","StorageError","prototype","this","unknown","cannotSliceBlob","invalidArgument","appDeleted","invalidRootOperation","invalidFormat","format","internalError","ErrorCode","bucket","path","path_","length","encode","encodeURIComponent","bucketString","host","bucketLocation","Location","makeFromUrl","e","url","location","bucketDomain","gsRegex","RegExp","httpModify","loc","decodeURIComponent","firebaseStorageHost","replace","groups","regex","indices","postModify","charAt","slice","i","group","captures","exec","bucketValue","pathValue","invalidUrl","error","promise_","Promise","reject","isString","p","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","backoffDone","requestWentThrough","status","connection","wasSuccessCode","result","getResponse","err","getErrorText","canceled","f","callback","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","handler","clearGlobalTimeout","clearTimeout","success","call","waitMillis","Math","random","stopped","stop","wasTimeout","start","backoffCallback","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","isRetryStatusCode_","successCode","indexOf","wasCanceled","ABORT","appDelete","abort","isFiveHundredCode","isExtraRetryCode","isRequestSpecificRetryCode","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","undefined","bb","append","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataUrl","parts","base64","rest","decoded","percentEncodedBytes_","dataURLBytes_","b","c","charCodeAt","push","Uint8Array","hasMinus","hasUnder","hasPlus","hasSlash","bytes","atob","array","dataURL","matches","match","middle","s","end","substring","endsWith","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","sliced","blob","webkitSlice","mozSlice","sliceBlob","FbsBlob","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","jsonObjectOrNull","obj","JSON","parse","Array","isArray","lastComponent","lastIndexOf","noXform_","metadata","server","local","writable","xform","mappings_","getMappings","mappings","nameMapping","_metadata","fullPath","xformPath","sizeMapping","Number","fromResource","service","resource","len","mapping","defineProperty","get","_makeStorageReference","addRef","fromResourceString","resourceString","toResourceString","stringify","fromResponseString","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromBackendResponse","method","urlParams","headers","body","errorHandler","progressCallback","successCodes","additionalRetryCodes","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","tokens","split","token","alt","downloadUrlFromResourceString","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","requestInfo","list","delimiter","pageToken","maxResults","isRoot","bucketOnlyServerUrl","listHandler","metadataForUpload_","metadataClone","assign","determineContentType_","multipartUpload","boundary","str","toString","genBoundary","metadata_","preBlobPart","postBlobPart","maxUploadRetryTime","uploadData","current","finalized","checkResumeHeader_","allowed","getResponseHeader","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","nextOrObserver","complete","next","observer","argsToForward","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","responseType","newTextConnection","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_codeEquals","completeTransitions_","_transition","_metadataErrorHandler","_promise","_start","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","_continueUpload","_oneShotUpload","all","storage","_getAuthToken","_getAppCheckToken","authToken","appCheckToken","_resolveToken","metadataForUpload","createResumableUpload","_location","createRequest","_makeRequest","getPromise","sizeString","isNaN","getResumableUploadStatus","statusRequest","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","metadataRequest","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","_addObserver","_removeObserver","onFulfilled","onRejected","_notifyObserver","splice","_finishPromise","triggered","fbsAsync","bind","snapshot","valid","_service","Reference","_newRef","newPath","listAllHelper","accumulator","a","opt","nextPage","options","op","requestsList","makeRequestWithTokens","updateMetadata","_throwIfRoot","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","deleteObject","_xhr","_text","requestsDeleteObject","_getChild","childPath","canonicalChildPath","filter","join","refFromPath","_bucket","serviceOrRef","pathOrUrl","test","extractBucket","config","makeFromBucketSpec","connectStorageEmulator","port","mockUserToken","_overrideAuthToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","appCheck","request","clear","requestFactory","appId","firebaseVersion","addGmpidHeader_","addAuthHeader_","addVersionHeader_","addAppCheckHeader_","makeRequest","add","delete","STORAGE_TYPE","uploadBytesResumable","uploadBytesResumableInternal","requestsGetMetadata","getMetadataInternal","listAllInternal","refInternal","connectEmulatorInternal","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","setMultipleInstances","version","_delegate","catch","pause","resume","wrappedNextOrObserver","taskSnapshot","on","_getChildInternal","ReferenceCompat","parent","r","listInternal","updateMetadataInternal","getDownloadURLInternal","deleteObjectInternal","storageExp","identifier","instance","namespaceExports","Storage","INTERNAL","registerComponent","setServiceProps","registerVersion","getDialogContentTextUtilityClass","generateUtilityClass","generateUtilityClasses","DialogContentTextRoot","shouldForwardProp","prop","rootShouldForwardProp","DialogContentText","composedClasses","color"],"mappings":"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","file":"static/js/23.bba07c3c.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\n\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n\n  const {\n    className,\n    id: idProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId: id = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: id\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to StorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (progressEvent: ProgressEvent) => void =\n        progressEvent => {\n          const loaded = progressEvent.loaded;\n          const total = progressEvent.lengthComputable\n            ? progressEvent.total\n            : -1;\n          if (this.progressCallback_ !== null) {\n            this.progressCallback_(loaded, total);\n          }\n        };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || this.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: Unsubscribe | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot>\n{\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  StorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '@firebase/storage';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: StorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: StorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '@firebase/storage';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  UploadMetadata,\n  FullMetadata,\n  SettableMetadata,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob,\n  _dataFromString,\n  _invalidRootOperation\n} from '@firebase/storage';\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as UploadMetadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: types.UploadMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = { ...metadata };\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone as FullMetadata & { [k: string]: string }\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as SettableMetadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  connectStorageEmulator,\n  FirebaseStorage,\n  _Location,\n  _invalidArgument,\n  _FirebaseStorageImpl\n} from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw _invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw _invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as _FirebaseStorageImpl).host);\n    } catch (e) {\n      throw _invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n\nfunction isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  StringFormat,\n  _TaskEvent as TaskEvent,\n  _TaskState as TaskState\n} from '@firebase/storage';\n\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container\n    .getProvider('storage')\n    .getImmediate({ identifier: url });\n\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    storageExp\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as unknown as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp, url?: string): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getDialogContentTextUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogContentText', slot);\n}\nconst dialogContentTextClasses = generateUtilityClasses('MuiDialogContentText', ['root']);\nexport default dialogContentTextClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Typography from '../Typography';\nimport { getDialogContentTextUtilityClass } from './dialogContentTextClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\n\nconst DialogContentTextRoot = styled(Typography, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiDialogContentText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nconst DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogContentText'\n  });\n\n  const ownerState = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogContentTextRoot, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"text.secondary\",\n    ref: ref,\n    ownerState: ownerState\n  }, props, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogContentText;"],"sourceRoot":""}